swagger: '2.0'
info:
  version: 3.0.0
  title: SuperOn API
  
  description:
    This API allows access to SuperOn's e-commerce platform. 
    
    This API will evolve incrementaly under this major version maintaining backward compatibility. That means that new keys may be added to the objects bellow and you should foresee that. The object keys, once provided, won't be removed or have their type modified in the same major API version. 
    
    For more information about SuperOn, see http://lifeapps.com.br/superon or send us a message at contato@lifeapps.com.br.
    
  license: 
    name: Superon API Terms of Use
    url: 'http://lifeapps.com.br/superon/api-usage-license'
  contact:
    email: contato@lifeapps.com.br
host: 'localhost:3000'
basePath: '/api/v3'

schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

paths:
  '/orders/ready-to-deliver':
    
    get:
      tags: 
        - "Order Cicle"
      description: 'Returns orders in the state "Ready to Deliver"'
      operationId: 'get-all-orders-ready-to-deliver'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/OrdersResponse'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/price/batch':
    post:
      tags:
        - "Configuration"
      description: 'Provides batch update for prices on a certain supplier. This allows 
      multiple products to be updated and the total payload should have less than 1Mb.'
      parameters:
       - name: body
         in: body
         required: true
         description: A batch for price update. This should contain at least one item. This is an async operation and will process in some moment in the future.
         schema:
          $ref: '#/definitions/PriceBatchRequest'
            
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SimpleOk'
        default:
          description: Error
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/swagger':
    x-swagger-pipe: swagger_raw
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >
      For accessing the API a valid JWT (jwt.io) token must be passed in all the
      queries in the 'Authorization' header. If you need a JWT token, mail
      contato@lifeapps.com.br for further instructions
      The following syntax must be used in the 'Authorization' header 
          "Bearer xxxxxx.yyyyyyy.zzzzzz"
security: 
  - Bearer: []
  
definitions:
  UUID_v4:
    type: string
    description: "Documentation only model. UUID stands for Universally Unique IDentifier. They are defined under RFC 4122 (ietf.org/rfc/rfc4122.txt)
    
      This type is used repeatly throughout this API to identify all the major entities. As per the JSON specification, it should be transmitted as a string.
      
      Example: 64997676-3b65-4711-bdc8-2b915a12551f"
  
  Date_ISO_8801:
    type: string
    description: 
      "Documentation only model. Date in ISO-8601 format (2007-03-01T13:00:00Z or 2007-03-01T10:00:00-03:00). As per the JSON specification, it should be transmitted as a string. Note that the timezone is specified in this format and the API will use BST (Brazilian Standart Time) if necessary. You should convert for the desired timezone and make sure to store this extra piece of information aproprietly if necessary. 
      Relevant specification can be found at www.w3.org/TR/NOTE-datetime and ietf.org/rfc/rfc3339.txt
      
      Example: These two dates represent the same moment in time. Both are valid for this API:
      
      - 2007-03-01T13:00:00Z = 01/jan/2007 at 1pm, Greenwich Mean Time (+0)
      
      - 2007-03-01T10:00:00-03 = 01/jan/2007 at 10am, Brazilian Standart Time (-3)
      "
  
  #  #  #  #  #  #
  Product_Unit:
    type: string
    description: "Documentation only model. The unit used to count the product being ordered. Supported units are: "
    enum: [KG, UN]
  
  #  #  #  #  #  #
  SimpleOk:
    properties:
      ok:
        type: boolean
        description: 'Will return "true" once the batch has been accepted for processing. This is processing is asyncronous/non-blocking'

  #  #  #  #  #  #
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
      code:
        type: number
      cause:
        type: string
  
  #  #  #  #  #  #
  ProductResponse:
    properties:
      barcode: 
        type: string
        description: A common barcode to identify the product.
      internalcode: 
        type: "string"
        description: An internal code to identity products that don't have a barcode. A product will have either a barcode or a internalcode, never both or none.
      maxitensperorder: 
        type: number
        description: This is the current configuration for how many of this very product is allowed to order in the same purchase. This should be observer with the unit.
      idproduct: 
        type: string
        description: "A UUID_v4 that identifies this product. See the model UUID_v4."
      price: 
        type: number
        description: The price for this product in the moment of the purchase
      quantity: 
        type: number
        description: How many/how much of this item was ordered
      netvalue: 
        type: number
        description: The net value for this ammount and price of product (quantity * price)
      description: 
        type: string
        description: An arbitrary description for the product. This is what the customer sees in the e-commerce
      unit: 
        type: string
        description: A unit to mease the quantity/ammount in witch this product is traded. See the model Product_Unit for further detail
        enum: [KG, UN]
  
  #  #  #  #  #  #
  OrdersResponse:
    properties: 
      numorder:
        type: number
      idorder:
        type: string
        description: "A UUID_v4 that identifies this order. See the model UUID_v4."
      date:
        type: string
        description: "The order date. It's set when the user submits a purchase and is not altered after that. See the model Date_ISO_8801 for more info"
      products:
        type: "array"
        description: "List of products that compose this order"
        items:
            $ref: "#/definitions/ProductResponse"

  #  #  #  #  #  #
  PriceBatchRequest:
    properties:
      notes:
        type: string
        description: An arbitrary non mandatory note about this price update
      items:
        type: array
        minimum: 1
        items:
          $ref: '#/definitions/PriceBatchItemRequest'
          
  #  #  #  #  #  #
  PriceBatchItemRequest:
    description: Represents a price update for that product. Send EITHER the internalcode or the barcode. If a product has a barcode, that should be used.
    properties:
      internalcode:
        type: number
        description: A product internal code. This exists for products that do not have a common barcode
      barcode:
        type: number
        description: A product barcode
      price:
        type: number
        description: Product new price
      availablefororder:
        type: boolean
        description: Determines if this product should be made available for final consumers (true) or if it should be hidden and made unavailable until further updates
            
            
            
            